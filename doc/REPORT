Contributions

Together we spent a couple hours reading through the project specification
   and drawing out an architecture/protocol diagram that would satisfy the requirements
   
Dustin then spent about 5 hours implementing the authentication, transaction and some of the logging protocols we designed.

We then met to finalize discussions of how the logging would be handled to 
  satisfy non-repudiation and completed its implementation.
  
Dustin spent some more time implementing the log reading extra credit feature, while
  Chris focused on the written requirements.


Time Estimate

Chris
2.5 - Documentation + Writeup

 + mutual


Dustin
5 - Implementation
? - Log reading (Extra Credit)

Mutual:
2.5 hours - Intial design
2 hours   - Non-repudiation design and implementation






Requirements and Mechanism Overview
1. Authentication Algorithm
    * Meet criteria outlined (in assignment spec)

    * ATM should verify Bank's authenticity
    * ATM should obtain account owner's name (display it)
    * Establish AES session key
    * Server should verify user's authenticity
    * Obtain account number
    * Obtain ATM identifier
    * Establish shared session key with ATM
    * Based on RSA encryption
    
    
    a) Customer inserts ATMCard into ATM and enters PIN to verify ownership of Private Key
    b) ATM sends BankServer AuthInit Message on behalf of the Customer.
        i) Included in this message are:
            * ATM Identifier
            * Account number of the customer - allows Bank to find the public key of the customer
        ii) The bank also randomly selects a Sequence number to assign to this session of messages

    c) Bank issues challenge to Customer encrypted with the public key of the Customer
        i) Included in the Challenge are:
            * Nonce - generated by the BankServer
            * incremented Sequence number
    
    d) ATM Session recieves Challenge from BankServer, then sends Response to BankServer
        i) To send a valid response, the ATM must:
            * decrypt the Challenge sent from the bank using the authorized Private Key of the Customer
            * send back the Bank's Nonce
            * send back the next sequence number
        
        ii) At this point the Customer is authenticated to the bank
        
    e) ATM issues a Challenge to the bank server encrypted with the Bank's Public Key
        i) Included in the Challenge are:
            * Nonce - generated by the ATM
            * incremented Sequence number
    
    f) BankServer recieves Challenge from ATM, then sends Response to ATM
        i) To send a valid response, the Bank must:
            * decrypt the Challenge sent from the ATM using the Bank's PrivateKey
            * send back the ATM's Nonce
            * send back the next sequence number
    
        ii) At this point the Bank is authenticated to the ATM
    
    g) BankServer sends AuthMessage to ATM
        i) The AuthMessage includes:
            * AES SessionKey
        
        ii) The AuthMessage is the last to use RSA encryption.  Messages from now will use RSA signatures and AES encryption
        
    Authentication Protocol Complete 
    
    
2. Transaction Protocol
    * Meets criteria for confidentiality
    
    * No attack may modify or read contents of the transactions
    * Bank should obtain enough information during a transaction to convince a third party
       that the transaction was initiated by the user
    * Based on AES encryption and RSA signatures
    
    
    a) ATM sends one of
        * MakeDeposit
        * MakeWithdrawal
        * CheckBalance
        * Quit
        
        i) The Message is signed with the Customers PrivateKey
        ii) The Message is encrypted with the AES Session Key
    
    b) Bank Receives message, takes the requested action and 
        sends message to ATM indicating balance for all transactions requested
        
        i) Message is signed by the Banks PrivateKey
        ii) Message is encrypted by the AES Session Key
        

3. Cryptographic Audit Log
    * Protected against unauthorized disk accesses
    * Only BankServer uses the log
    * Justify the information recorded in the log
    
    Every logged message is an object of type LogMessageTuple, which contains two parts; LogMessageHeader and LogMessage
    
    LogMessageHeader - 
        The contents of the LogMessageHeader are: 
                * Session Key used to log the forthcoming message
                * salt in the form of a random number
                
        The header is then encrypted with the BankServer's public key to prevent unauthorized reads
        The salt serves to randomize the content being encrypted to defend against attacks of the Bank's RSA key
                
    LogMessage (typically an object extending LogMessage)
        Every LogMessage has:
                * timestamp
                * session number
                * message contents
        
        This LogMessage has been signed by the sender and is encrypted with the AES Session Key prior to writing in the Log
        

Threat Types and Mitigation

* Passive Attacker
  - Read Meassages
  Read attacks are mitigated by sending only encrypted messages between the Bank and the ATM and only after authentication is established.

* Active Attacker
  - Changed messages
  When a message is received it is de-serialized and verified for authentcity and correctness.
  Message verification will fail if:
        * A changed messaged is such that it can't be de-serialized
        * The message signature can't be verified with the public key of the sender


  Upon failing verification, the transaction, authentication will not proceed.
  
  - Replay attacks
  All messages are given a sequence number by the BankServer (first one chosen at random).
  When a message is verified:
        * Messages are checked for the correct sequence number for that session.
        * The time between messages cannot be more than a certain timeout (10 minutes by default)

  So for a successful reply attack, an attacker requires:
        * The session number for a new session matched that of an old one
        * The new sequence numbers are the same as the old session
        * The time between the old session and new session is less than the timeout

  - New messages generated
  In order to generate new messages, the attacker would have to have the private key of the customer, 
    otherwise when received by the bank, the message would not verify.
  

* Insecure log storage
  - Unauthorized Read
  Everything written to the log is encrypted either with the Bank's Public key or with the AES session key
  In the limit of there only being one session's logs stored, the could be a lot of content encrypted with the same session key,
        but under normal and prolonged use, the log should have interleaving appends from various session, all using 
        different session keys for encrypting.
        

  
  - Non-repudiation  

  Log messages are signed by the sender. Therefore, if a third party were to be provided the log, they could
        verify the source of each message.      